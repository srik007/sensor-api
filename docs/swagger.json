{
    "swagger": "2.0",
    "info": {
        "description": "A Under water sensor api to monitor the sensor data and generate aggrates of the data.",
        "title": "Underwater Sensor API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/generate": {
            "post": {
                "description": "Generate the meta data for sensors and sensor groups",
                "summary": "Generate the sensor metadata (code name, coordaiates, data output rate) and sensor groups Ex: Gamma 3",
                "operationId": "generate-sensor-metadata",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "text"
                        }
                    }
                }
            }
        },
        "/group/{groupName}/species": {
            "get": {
                "description": "Get total species by group name.",
                "produces": [
                    "application/json"
                ],
                "summary": "Collect all the fish species detected under sensors belonging to a given sensor group.",
                "operationId": "collect-total-species-under-group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group name",
                        "name": "groupName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Specie"
                            }
                        }
                    }
                }
            }
        },
        "/group/{groupName}/species//top/:topN": {
            "get": {
                "description": "Get top N species by group name.",
                "produces": [
                    "application/json"
                ],
                "summary": "Collect top N fish species detected under sensors belonging to a given sensor group.",
                "operationId": "collect-top-n-species-under-group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group name",
                        "name": "groupName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Top n",
                        "name": "topN",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Specie"
                            }
                        }
                    }
                }
            }
        },
        "/group/{groupName}/temparature": {
            "get": {
                "description": "Collect average temparature",
                "produces": [
                    "application/json"
                ],
                "summary": "Collect average temparature of all the sensors temparature under given group",
                "operationId": "collect-avg-temparature",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group name",
                        "name": "groupName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/interfaces.AverageTransparencyResponse"
                        }
                    }
                }
            }
        },
        "/region/temperature/max": {
            "get": {
                "description": "Calculate maximum temparature",
                "produces": [
                    "application/json"
                ],
                "summary": "Calculate maximum temparature inside a region",
                "operationId": "calculate-max-temparature",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Minimum x",
                        "name": "xMin",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Maximum x",
                        "name": "xMax",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Minimum y",
                        "name": "yMin",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Maximum y",
                        "name": "yMax",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Minimum z",
                        "name": "zMin",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Maximum z",
                        "name": "zMax",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/valueObjects.Temparature"
                        }
                    },
                    "400": {
                        "description": "Failure response",
                        "schema": {
                            "$ref": "#/definitions/interfaces.ErrorResposne"
                        }
                    }
                }
            }
        },
        "/region/temperature/min": {
            "get": {
                "description": "Calculate minimum temparature",
                "produces": [
                    "application/json"
                ],
                "summary": "Calculate minimum temparature inside a region",
                "operationId": "calculate-min-temparature",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Minimum x",
                        "name": "xMin",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Maximum x",
                        "name": "xMax",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Minimum y",
                        "name": "yMin",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Maximum y",
                        "name": "yMax",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Minimum z",
                        "name": "zMin",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Maximum z",
                        "name": "zMax",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/valueObjects.Temparature"
                        }
                    },
                    "400": {
                        "description": "Failure response",
                        "schema": {
                            "$ref": "#/definitions/interfaces.ErrorResposne"
                        }
                    }
                }
            }
        },
        "/schedule": {
            "post": {
                "description": "Run background job to generate sensors data",
                "summary": "Background job to sendule sensors and generate the data for given sensors \u0026 Also schedule the backgorund job to do the aggregations on generated data.",
                "operationId": "schedule-jobs",
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "type": "text"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entity.Specie": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "interfaces.AverageTransparencyResponse": {
            "type": "object",
            "properties": {
                "groupName": {
                    "type": "string"
                },
                "transparency": {
                    "type": "number"
                }
            }
        },
        "interfaces.ErrorResposne": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "valueObjects.Temparature": {
            "type": "object",
            "properties": {
                "scale": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            }
        }
    }
}