basePath: /api/v1
definitions:
  entity.CodeName:
    properties:
      groupId:
        type: integer
      name:
        type: string
    type: object
  entity.Sensor:
    properties:
      codeName:
        $ref: '#/definitions/entity.CodeName'
      coordinate:
        $ref: '#/definitions/valueObjects.Coordinate'
      dataOutputRate:
        $ref: '#/definitions/valueObjects.DataOuputRate'
      id:
        type: integer
    type: object
  entity.Specie:
    properties:
      count:
        type: integer
      name:
        type: string
    type: object
  interfaces.AverageTransparencyResponse:
    properties:
      groupName:
        type: string
      transparency:
        type: number
    type: object
  interfaces.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  valueObjects.Coordinate:
    properties:
      x:
        type: number
    type: object
  valueObjects.DataOuputRate:
    properties:
      format:
        type: string
      value:
        type: integer
    type: object
  valueObjects.Temparature:
    properties:
      scale:
        type: string
      value:
        type: number
    type: object
host: localhost:8080
info:
  contact: {}
  description: A Under water sensor api to monitor the sensor data and generate aggrates
    of the data.
  title: Underwater Sensor API
  version: "1.0"
paths:
  /create-metadata:
    post:
      description: Create the meta data for sensors and sensor groups
      operationId: create-sensor-metadata
      responses:
        "200":
          description: Successfully response
          schema:
            items:
              $ref: '#/definitions/entity.Sensor'
            type: array
      summary: Create sensor metadata and sensor group metadata
  /group/{groupName}/species:
    get:
      description: Get total species by group name.
      operationId: collect-total-species-under-group
      parameters:
      - description: Group name
        in: path
        name: groupName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            items:
              $ref: '#/definitions/entity.Specie'
            type: array
      summary: Collect all the fish species detected under sensors belonging to a
        given sensor group.
  /group/{groupName}/species/top/:topN:
    get:
      description: Get top N species by group name.
      operationId: collect-top-n-species-under-group
      parameters:
      - description: Group name
        in: path
        name: groupName
        required: true
        type: string
      - description: Top n
        in: path
        name: topN
        required: true
        type: integer
      - description: Start time in Unix timestamp
        in: query
        name: from
        type: integer
      - description: End time in Unix timestamp
        in: query
        name: till
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            items:
              $ref: '#/definitions/entity.Specie'
            type: array
      summary: Collect top N fish species detected under sensors belonging to a given
        sensor group.
  /group/{groupName}/temparature:
    get:
      description: Collect average temparature
      operationId: collect-avg-temparature
      parameters:
      - description: Group name
        in: path
        name: groupName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/interfaces.AverageTransparencyResponse'
      summary: Collect average temparature of all the sensors temparature under given
        group
  /region/temparature/max:
    get:
      description: Calculate maximum temparature
      operationId: calculate-max-temparature
      parameters:
      - description: Minimum x
        in: query
        name: xMin
        required: true
        type: number
      - description: Maximum x
        in: query
        name: xMax
        required: true
        type: number
      - description: Minimum y
        in: query
        name: yMin
        required: true
        type: number
      - description: Maximum y
        in: query
        name: yMax
        required: true
        type: number
      - description: Minimum z
        in: query
        name: zMin
        required: true
        type: number
      - description: Maximum z
        in: query
        name: zMax
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/valueObjects.Temparature'
        "400":
          description: Failure response
          schema:
            $ref: '#/definitions/interfaces.ErrorResponse'
      summary: Calculate maximum temparature inside a region
  /region/temparature/min:
    get:
      description: Calculate minimum temparature
      operationId: calculate-min-temparature
      parameters:
      - description: Minimum x
        in: query
        name: xMin
        required: true
        type: number
      - description: Maximum x
        in: query
        name: xMax
        required: true
        type: number
      - description: Minimum y
        in: query
        name: yMin
        required: true
        type: number
      - description: Maximum y
        in: query
        name: yMax
        required: true
        type: number
      - description: Minimum z
        in: query
        name: zMin
        required: true
        type: number
      - description: Maximum z
        in: query
        name: zMax
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/valueObjects.Temparature'
        "400":
          description: Failure response
          schema:
            $ref: '#/definitions/interfaces.ErrorResponse'
      summary: Calculate minimum temparature inside a region
  /schedule:
    post:
      description: Run background job to generate sensors data
      operationId: schedule-jobs
      responses:
        "202":
          description: Accepted
          schema:
            type: text
      summary: Background job to sendule sensors and generate the data for given sensors
        & Also schedule the backgorund job to do the aggregations on generated data.
  /sensor/{codeName}/temparature/average:
    get:
      description: Calculate average temparature by a sensor
      operationId: calculate-avg-temparature-by-sensor
      parameters:
      - description: Start time in Unix timestamp
        in: query
        name: from
        required: true
        type: integer
      - description: End time in Unix timestamp
        in: query
        name: till
        required: true
        type: integer
      - description: Code name of the sensor
        in: path
        name: codeName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/valueObjects.Temparature'
        "400":
          description: Failure response
          schema:
            $ref: '#/definitions/interfaces.ErrorResponse'
      summary: Calculates average temparature in a given time interval
swagger: "2.0"
